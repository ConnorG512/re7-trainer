reading a dereferenced value from a register (integer):
print *(int*)($REGISTER + OFFSET)

setting a value at a dereferenced pointer (integer):
set *(int*)($REGISTER + OFFSET) = Value

x/x $REGISTER - dereference the pointer and show the value at the pointed address

Resident Evil 7
0x141d80673:	mov    DWORD PTR [rsi+0x6c],r15d
on this instruction, setting r15d register will change the amount of gear after the purchase.
using "set $r15d = 999999999999" caused an integer overflow to - meaning that the check for max is bypassed here

// Snapshot
re7.exe+1D80673 - 44 89 7E 6C           - mov [rsi+6C],r15d
re7.exe+1D80677 - 48 85 DB              - test rbx,rbx
re7.exe+1D8067A - 74 49                 - je re7.exe+1D806C5
// Snapshot

When a shot is fired:
setting the value of eax on instruction "1945FF7" will change the current ammo value.

// Snapshot
re7.exe+1945FF7 - 89 43 14              - mov [rbx+14],eax
re7.exe+1945FFA - 48 8B 5C 24 30        - mov rbx,[rsp+30]
re7.exe+1945FFF - 48 8B 74 24 40        - mov rsi,[rsp+40]
// Snapshot

health instruction: 
offset rdx + 14 is the entity current hp
offset rdx + 10 is the entity max hp
For the player, offset 0xC8 is 0 while for both tested enemies it is 1, may be useful for comparing them.
re7.exe+1B815EF - F3 0F11 52 14         - movss [rdx+14],xmm2
re7.exe+1B815F4 - 66 0F2F C1            - comisd xmm0,xmm1
re7.exe+1B815F8 - 72 10                 - jb re7.exe+1B8160A

When the scrap generator generates 100 scrap
edx is the amount of scrap in the machine
re7.exe+20AF6E8 - 01 93 C8000000        - add [rbx+000000C8],edx
re7.exe+20AF6EE - 0F57 C0               - xorps xmm0,xmm0
re7.exe+20AF6F1 - B0 01                 - mov al,01
